/////////////////////////////////////////////////////////////////////////////
// Name:        cspellcheck.cpp
// Purpose:
// Author:      Gerald Brandt
// Modified by:
// Created:     Wed 10 Oct 2012 13:07:20 CDT
// RCS-ID:
// Copyright:   (c) Majentis Technologies
// Licence:
/////////////////////////////////////////////////////////////////////////////

/*
// Generated by DialogBlocks (unregistered), Wed 10 Oct 2012 13:07:20 CDT

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

#include <wx/accel.h>

////@begin includes
#include "wx/imaglist.h"
////@end includes

#include "cspellcheck.h"
#include "../src/core/include/config.h"

////@begin XPM images
////@end XPM images




IMPLEMENT_DYNAMIC_CLASS( cSpellCheck, wxDialog )




BEGIN_EVENT_TABLE( cSpellCheck, wxDialog )

////@begin cSpellCheck event table entries
    EVT_BUTTON( ID_SPELL_IGNORE, cSpellCheck::OnSpellIgnoreClick )

    EVT_BUTTON( ID_SPELL_ADD, cSpellCheck::OnSpellAddClick )

    EVT_BUTTON( ID_SPELL_ENTER, cSpellCheck::OnSpellEnterClick )

    EVT_BUTTON( ID_SPELL_MORE, cSpellCheck::OnSpellMoreClick )

////@end cSpellCheck event table entries

    EVT_BUTTON (ID_SPELL_SELECT1, cSpellCheck::OnSpellSelect1)
    EVT_BUTTON (ID_SPELL_SELECT2, cSpellCheck::OnSpellSelect2)
    EVT_BUTTON (ID_SPELL_SELECT3, cSpellCheck::OnSpellSelect3)
    EVT_BUTTON (ID_SPELL_SELECT4, cSpellCheck::OnSpellSelect4)
    EVT_BUTTON (ID_SPELL_SELECT5, cSpellCheck::OnSpellSelect5)

END_EVENT_TABLE()




cSpellCheck::cSpellCheck()
{
    Init();
}

cSpellCheck::cSpellCheck( wxWindow* parent, wxWindowID id, const QString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}




bool cSpellCheck::Create( wxWindow* parent, wxWindowID id, const QString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin cSpellCheck creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end cSpellCheck creation
    return true;
}




cSpellCheck::~cSpellCheck()
{
////@begin cSpellCheck destruction
////@end cSpellCheck destruction
}




void cSpellCheck::Init()
{
////@begin cSpellCheck member initialisation
    mBadWord = NULL;
    mSpellList = NULL;
    mGlobal = NULL;
////@end cSpellCheck member initialisation

    wxAcceleratorEntry entries[15];
    entries[0].Set(wxACCEL_NORMAL, (int) 'I', ID_SPELL_IGNORE);
    entries[1].Set(wxACCEL_NORMAL, (int) 'i', ID_SPELL_IGNORE);
    entries[2].Set(wxACCEL_NORMAL, (int) 'A', ID_SPELL_ADD);
    entries[3].Set(wxACCEL_NORMAL, (int) 'a', ID_SPELL_ADD);
    entries[4].Set(wxACCEL_NORMAL, (int) 'M', ID_SPELL_MORE);
    entries[5].Set(wxACCEL_NORMAL, (int) 'm', ID_SPELL_MORE);
    entries[6].Set(wxACCEL_NORMAL, (int) 'E', ID_SPELL_ENTER);
    entries[7].Set(wxACCEL_NORMAL, (int) 'e', ID_SPELL_ENTER);
    entries[8].Set(wxACCEL_NORMAL, (int) 'G', ID_SPELL_GLOBAL);
    entries[9].Set(wxACCEL_NORMAL, (int) 'g', ID_SPELL_GLOBAL);
    entries[10].Set(wxACCEL_NORMAL, (int) '1', ID_SPELL_SELECT1);
    entries[11].Set(wxACCEL_NORMAL, (int) '2', ID_SPELL_SELECT2);
    entries[12].Set(wxACCEL_NORMAL, (int) '3', ID_SPELL_SELECT3);
    entries[13].Set(wxACCEL_NORMAL, (int) '4', ID_SPELL_SELECT4);
    entries[14].Set(wxACCEL_NORMAL, (int) '5', ID_SPELL_SELECT5);
    wxAcceleratorTable accel(15, entries);
    SetAcceleratorTable(accel);

}




void cSpellCheck::CreateControls()
{
////@begin cSpellCheck content construction
    cSpellCheck* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 0, wxGROW|wxALL, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemDialog1, wxID_STATIC, _("Word : "), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    mBadWord = new wxTextCtrl( itemDialog1, ID_TEXTCTRL, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    mBadWord->Enable(false);
    itemBoxSizer3->Add(mBadWord, 1, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer6 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer6, 0, wxGROW|wxALL, 5);

    wxStaticText* itemStaticText7 = new wxStaticText( itemDialog1, wxID_STATIC, _("Suggestions : "), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
    itemBoxSizer6->Add(itemStaticText7, 0, wxALIGN_TOP|wxALL, 5);

    wxBoxSizer* itemBoxSizer8 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer6->Add(itemBoxSizer8, 0, wxGROW|wxALL, 5);

    mSpellList = new wxListCtrl( itemDialog1, ID_LISTCTRL, wxDefaultPosition, wxSize(200, 100), wxLC_REPORT|wxLC_NO_HEADER );
    itemBoxSizer8->Add(mSpellList, 1, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer10 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer6->Add(itemBoxSizer10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton11 = new wxButton( itemDialog1, ID_SPELL_IGNORE, _("&Ignore"), wxDefaultPosition, wxDefaultSize, 0 );
    itemButton11->SetDefault();
    itemBoxSizer10->Add(itemButton11, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxButton* itemButton12 = new wxButton( itemDialog1, ID_SPELL_ADD, _("&Add"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer10->Add(itemButton12, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxButton* itemButton13 = new wxButton( itemDialog1, ID_SPELL_ENTER, _("&Enter"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer10->Add(itemButton13, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxButton* itemButton14 = new wxButton( itemDialog1, ID_SPELL_MORE, _("&More"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer10->Add(itemButton14, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxButton* itemButton15 = new wxButton( itemDialog1, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer10->Add(itemButton15, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    mGlobal = new wxCheckBox( itemDialog1, ID_SPELL_GLOBAL, _("&Global     "), wxDefaultPosition, wxDefaultSize, 0 );
    mGlobal->SetValue(false);
    mGlobal->Enable(false);
    itemBoxSizer2->Add(mGlobal, 0, wxALIGN_RIGHT|wxALL, 5);

////@end cSpellCheck content construction

    mSpellList->AppendColumn("") ;
    mSpellList->AppendColumn("") ;

    wxListItem item ;
    item.SetText("col 1") ;
    item.SetImage(-1) ;
    mSpellList->InsertColumn(0, item) ;

    item.SetText("col 2") ;
    item.SetImage(-1) ;
    mSpellList->InsertColumn(1, item) ;

    mSpellList->SetItemCount(5);

}




bool cSpellCheck::ShowToolTips()
{
    return true;
}



wxBitmap cSpellCheck::GetBitmapResource( const QString& name )
{
    // Bitmap retrieval
////@begin cSpellCheck bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end cSpellCheck bitmap retrieval
}


wxIcon cSpellCheck::GetIconResource( const QString& name )
{
    // Icon retrieval
////@begin cSpellCheck icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end cSpellCheck icon retrieval
}






void cSpellCheck::OnSpellIgnoreClick( wxCommandEvent& event )
{
UNUSED_ARGUMENT(event) ;
    EndModal(ID_SPELL_IGNORE) ;
}




void cSpellCheck::OnSpellAddClick( wxCommandEvent& event )
{
UNUSED_ARGUMENT(event) ;
    EndModal(ID_SPELL_ADD) ;
}




void cSpellCheck::OnSpellEnterClick( wxCommandEvent& event )
{
UNUSED_ARGUMENT(event) ;
    EndModal(ID_SPELL_ENTER) ;
}




void cSpellCheck::OnSpellMoreClick( wxCommandEvent& event )
{
UNUSED_ARGUMENT(event) ;
    EndModal(ID_SPELL_MORE) ;
}



void cSpellCheck::OnSpellSelect1( wxCommandEvent &event)
{
UNUSED_ARGUMENT(event) ;
    EndModal(ID_SPELL_SELECT1) ;
}



void cSpellCheck::OnSpellSelect2( wxCommandEvent &event)
{
UNUSED_ARGUMENT(event) ;
    EndModal(ID_SPELL_SELECT2) ;
}



void cSpellCheck::OnSpellSelect3( wxCommandEvent &event)
{
UNUSED_ARGUMENT(event) ;
    EndModal(ID_SPELL_SELECT3) ;
}



void cSpellCheck::OnSpellSelect4( wxCommandEvent &event)
{
UNUSED_ARGUMENT(event) ;
    EndModal(ID_SPELL_SELECT4) ;
}



void cSpellCheck::OnSpellSelect5( wxCommandEvent &event)
{
UNUSED_ARGUMENT(event) ;
    EndModal(ID_SPELL_SELECT5) ;
}

*/
